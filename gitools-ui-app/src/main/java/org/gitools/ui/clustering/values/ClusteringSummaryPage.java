/*
 *  Copyright 2011 chris.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

package org.gitools.ui.clustering.values;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.gitools.matrix.model.element.IElementAttribute;
import org.gitools.ui.platform.wizard.AbstractWizardPage;

public class ClusteringSummaryPage extends AbstractWizardPage {

	// model wrapper
	private static class MatrixAttributeWrapper {

		private IElementAttribute attribute;

		public MatrixAttributeWrapper(IElementAttribute a) {
			this.attribute = a;
		}

		public IElementAttribute getMatrixAttribute() {
			return attribute;
		}

		public void setMatrixAttribute(IElementAttribute a) {
			this.attribute = a;
		}

		@Override
		public String toString() {
			return attribute.getName();
		}
	}

	public ClusteringSummaryPage(List<IElementAttribute> cellAttributes, int index) {
		
		initComponents();

		DefaultComboBoxModel model = new DefaultComboBoxModel();
		MatrixAttributeWrapper attrWrapper = null;
		for (IElementAttribute attr : cellAttributes) {
			attrWrapper = new MatrixAttributeWrapper(attr);
			model.addElement(attrWrapper);
		}

		dataClustCombo.setModel(model);
		dataClustCombo.setSelectedIndex(index);
		
		setTitle("Clustering method selection");
		setComplete(true);
	}


	@Override
	public void updateModel() {
		super.updateModel();

	}


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optGroup = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        columnsRadio = new javax.swing.JRadioButton();
        rowsRadio = new javax.swing.JRadioButton();
        cbPreprocessing = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        dataClustCombo = new javax.swing.JComboBox();
        cbHeader = new javax.swing.JCheckBox();
        cbSort = new javax.swing.JCheckBox();

        jLabel5.setText("Apply to:");

        optGroup.add(columnsRadio);
        columnsRadio.setSelected(true);
        columnsRadio.setText("columns");

        optGroup.add(rowsRadio);
        rowsRadio.setText("rows");

        cbPreprocessing.setSelected(true);
        cbPreprocessing.setText("Apply dimensionality reduction");

        jLabel6.setText("Values from:");

        cbHeader.setText("Create header");

        cbSort.setSelected(true);
        cbSort.setText("Sort heatmap by clustering results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbPreprocessing)
                        .addContainerGap(336, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbSort)
                        .addContainerGap(309, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbHeader)
                        .addContainerGap(446, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rowsRadio)
                                    .addComponent(columnsRadio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataClustCombo, 0, 400, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 438, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbPreprocessing)
                .addGap(18, 18, 18)
                .addComponent(cbSort)
                .addGap(18, 18, 18)
                .addComponent(cbHeader)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dataClustCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(14, 14, 14)
                .addComponent(columnsRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowsRadio)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbHeader;
    private javax.swing.JCheckBox cbPreprocessing;
    private javax.swing.JCheckBox cbSort;
    private javax.swing.JRadioButton columnsRadio;
    private javax.swing.JComboBox dataClustCombo;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.ButtonGroup optGroup;
    private javax.swing.JRadioButton rowsRadio;
    // End of variables declaration//GEN-END:variables

	public int getDataAttribute() {
		return dataClustCombo.getSelectedIndex();
	}

	public boolean isValuesFromRows() {
		return rowsRadio.isSelected();
	}

	public boolean isPreprocessing() {
		return cbPreprocessing.isSelected();
	}

	public boolean isSort() {
		return cbSort.isSelected();
	}

	public boolean isHeader() {
		return cbHeader.isSelected();
	}

	public void enableHeader(boolean res) {
		cbHeader.setEnabled(res);
	}

	public boolean isHeaderEnabled() {
		return cbHeader.isEnabled();
	}
}
