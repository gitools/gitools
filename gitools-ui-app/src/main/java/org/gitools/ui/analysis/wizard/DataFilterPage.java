/*
 * DataSourcePanel.java
 *
 * Created on September 4, 2009, 1:58 PM
 */

package org.gitools.ui.analysis.wizard;

import edu.upf.bg.cutoffcmp.CutoffCmp;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import org.gitools.ui.IconNames;
import org.gitools.ui.platform.IconUtils;
import org.gitools.ui.platform.dialog.MessageStatus;
import org.gitools.ui.platform.wizard.AbstractWizardPage;
import org.gitools.ui.settings.Settings;
import org.gitools.ui.utils.DocumentChangeListener;
import org.gitools.ui.utils.FileChooserUtils;

public class DataFilterPage extends AbstractWizardPage {

	private static final long serialVersionUID = 3840797252370672587L;

	/** Creates new form DataSourcePanel */
    public DataFilterPage() {
		setTitle("Select data filtering options");

		setLogo(IconUtils.getImageIconResourceScaledByHeight(IconNames.LOGO_DATA, 96));
		
        initComponents();

		DocumentChangeListener docCompleteListener = new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateState(); }
		};

		ItemListener itemListener = new ItemListener() {
			@Override public void itemStateChanged(ItemEvent e) {
				updateState(); }
		};

		rowsFilterCheck.addItemListener(itemListener);
		rowsFilterFilePath.getDocument().addDocumentListener(docCompleteListener);

		cutoffEnabledCheck.addItemListener(itemListener);
		String[] cmpNames = new String[CutoffCmp.comparators.length];
		for (int i = 0; i < cmpNames.length; i++)
			cmpNames[i] = CutoffCmp.comparators[i].getLongName();
		cutoffCmpCb.setModel(new DefaultComboBoxModel(cmpNames));
		cutoffCmpCb.setSelectedItem(CutoffCmp.GE.getLongName());

		cutoffValue.getDocument().addDocumentListener(docCompleteListener);
		cutoffValue.setText("1.5");

		discardNonMappedRowsCheck.addItemListener(itemListener);
		discardNonMappedRowsCheck.setVisible(false);
    }

	private void updateState() {
		boolean binaryFilterEnabled = true; //FIXME

		cutoffEnabledCheck.setEnabled(binaryFilterEnabled);
		cutoffCmpCb.setEnabled(binaryFilterEnabled && cutoffEnabledCheck.isSelected());
		cutoffValue.setEnabled(binaryFilterEnabled && cutoffEnabledCheck.isSelected());

		setMessage(MessageStatus.INFO, "");

		boolean complete = true;
		
		if (cutoffEnabledCheck.isSelected()) {
			boolean fail = false;
			try {
				Double.valueOf(cutoffValue.getText());}
			catch (NumberFormatException e) {
				fail = true;
				setStatus(MessageStatus.ERROR);
				setMessage("Cutoff value should be a real number.");
			}

			complete = !fail && !cutoffValue.getText().isEmpty();
		}

		String rowsFilterPath = rowsFilterFilePath.getText();
		if (!rowsFilterPath.isEmpty()) {
			File rowsFilterFile = new File(rowsFilterPath);
			if (!rowsFilterFile.exists()) {
				complete = false;
				setMessage(MessageStatus.ERROR, "File not found: " + rowsFilterPath);
			}
		}

		boolean rowsFilterChecked = rowsFilterCheck.isSelected();
		rowsFilterFilePath.setEnabled(rowsFilterChecked);
		rowsFilterFileBrowserBtn.setEnabled(rowsFilterChecked);
		if (rowsFilterChecked && rowsFilterFilePath.getDocument().getLength() == 0) {
			complete = false;
			setMessage(MessageStatus.ERROR, "Select a file containing rows");
		}

		setComplete(complete);
	}

	@Override
	public JComponent createControls() {
		return this;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        cutoffEnabledCheck = new javax.swing.JCheckBox();
        cutoffCmpCb = new javax.swing.JComboBox();
        cutoffValue = new javax.swing.JTextField();
        rowsFilterFilePath = new javax.swing.JTextField();
        rowsFilterFileBrowserBtn = new javax.swing.JButton();
        discardNonMappedRowsCheck = new javax.swing.JCheckBox();
        rowsFilterCheck = new javax.swing.JCheckBox();
        rowsFilterNote = new javax.swing.JLabel();

        cutoffEnabledCheck.setText("Transform to 1 (0 otherwise) cells with value");
        cutoffEnabledCheck.setEnabled(false);

        cutoffCmpCb.setEnabled(false);

        cutoffValue.setColumns(6);
        cutoffValue.setEnabled(false);

        rowsFilterFileBrowserBtn.setText("Browse...");
        rowsFilterFileBrowserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowsFilterFileBrowserBtnActionPerformed(evt);
            }
        });

        discardNonMappedRowsCheck.setText("Filter out rows for which no information appears in the modules");

        rowsFilterCheck.setText("Filter out rows which name doesn't appear in this file:");

        rowsFilterNote.setFont(rowsFilterNote.getFont().deriveFont(rowsFilterNote.getFont().getSize()-2f));
        rowsFilterNote.setText("This should be a file containing one row id per line.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rowsFilterCheck)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rowsFilterNote)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rowsFilterFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rowsFilterFileBrowserBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cutoffEnabledCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutoffCmpCb, 0, 224, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutoffValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(discardNonMappedRowsCheck))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rowsFilterCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rowsFilterFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsFilterFileBrowserBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowsFilterNote)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cutoffEnabledCheck)
                    .addComponent(cutoffCmpCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cutoffValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(discardNonMappedRowsCheck)
                .addContainerGap(192, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void rowsFilterFileBrowserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowsFilterFileBrowserBtnActionPerformed
		File selPath = FileChooserUtils.selectFile(
				"Select file",
				Settings.getDefault().getLastDataPath(),
				FileChooserUtils.MODE_OPEN);

		if (selPath != null) {
			rowsFilterFilePath.setText(selPath.getAbsolutePath());
			Settings.getDefault().setLastDataPath(selPath.getAbsolutePath());
		}
	}//GEN-LAST:event_rowsFilterFileBrowserBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cutoffCmpCb;
    private javax.swing.JCheckBox cutoffEnabledCheck;
    private javax.swing.JTextField cutoffValue;
    private javax.swing.JCheckBox discardNonMappedRowsCheck;
    private javax.swing.JCheckBox rowsFilterCheck;
    private javax.swing.JButton rowsFilterFileBrowserBtn;
    private javax.swing.JTextField rowsFilterFilePath;
    private javax.swing.JLabel rowsFilterNote;
    // End of variables declaration//GEN-END:variables

	public File getPopulationFile() {
		String text = rowsFilterFilePath.getText();
		return rowsFilterCheck.isSelected() && !text.isEmpty() ? new File(text) : null;
	}

	public boolean isBinaryCutoffEnabled() {
		return cutoffEnabledCheck.isSelected();
	}

	public CutoffCmp getBinaryCutoffCmp() {
		return CutoffCmp.getFromName((String) cutoffCmpCb.getSelectedItem());
	}

	public double getBinaryCutoffValue() {
		return Double.parseDouble(cutoffValue.getText());
	}

	public boolean isDiscardNonMappedRowsEnabled() {
		return discardNonMappedRowsCheck.isSelected();
	}

	public boolean isDiscardNonMappedRowsVisible() {
		return discardNonMappedRowsCheck.isVisible();
	}

	public void setDiscardNonMappedRowsVisible(boolean visible) {
		discardNonMappedRowsCheck.setVisible(visible);
	}

	public void setPopulationFileVisible(boolean visible) {
		rowsFilterCheck.setVisible(visible);
		rowsFilterFilePath.setVisible(visible);
		rowsFilterFileBrowserBtn.setVisible(visible);
		rowsFilterNote.setVisible(visible);
	}
}
