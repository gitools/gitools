/*
 *  Copyright 2011 Universitat Pompeu Fabra.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * LabelHeaderPage.java
 *
 * Created on 25-feb-2011, 21:01:35
 */

package org.gitools.ui.heatmap.header;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import org.gitools.heatmap.model.HeatmapDim;
import org.gitools.heatmap.model.HeatmapLabelsHeader;
import org.gitools.matrix.model.AnnotationMatrix;
import org.gitools.ui.platform.wizard.AbstractWizardPage;

public class LabelsHeaderPage extends AbstractWizardPage {

	protected HeatmapDim hdim;
	protected HeatmapLabelsHeader header;

    public LabelsHeaderPage(HeatmapDim hdim, HeatmapLabelsHeader header) {
		this.hdim = hdim;
		this.header = header;
		
        initComponents();

		ActionListener optionListener = new ActionListener() {
			@Override public void actionPerformed(ActionEvent e) {
				updateControls(); } 
		};
		
		idOpt.addActionListener(optionListener);
		annOpt.addActionListener(optionListener);
		patOpt.addActionListener(optionListener);

		AnnotationMatrix am = hdim.getAnnotations();
		if (am != null && am.getColumnCount() > 0) {
			annOpt.setSelected(true);
			DefaultListModel model = new DefaultListModel();
			for (int i = 0; i < am.getColumnCount(); i++)
				model.addElement(am.getColumnLabel(i));
			annList.setModel(model);
			annList.setSelectedIndex(0);
		}
		else {
			idOpt.setSelected(true);
			annOpt.setEnabled(false);
		}

		setTitle("Select the contents of the header");
		setComplete(true);
    }

	@Override
	public void updateControls() {
		super.updateControls();

		annList.setEnabled(annOpt.isSelected());
		pattText.setEnabled(patOpt.isSelected());
	}

	@Override
	public void updateModel() {
		super.updateModel();

		header.setLabelSource(getLabelSource());
		header.setLabelAnnotation(getAnnotation());
		header.setLabelPattern(getPattern());
	}

	public HeatmapLabelsHeader.LabelSource getLabelSource() {
		if (idOpt.isSelected())
			return HeatmapLabelsHeader.LabelSource.ID;
		else if (annOpt.isSelected())
			return HeatmapLabelsHeader.LabelSource.ANNOTATION;
		else if (patOpt.isSelected())
			return HeatmapLabelsHeader.LabelSource.PATTERN;
		return HeatmapLabelsHeader.LabelSource.ID;
	}

	public String getAnnotation() {
		if (annList.getSelectedIndex() != -1)
			return (String) annList.getSelectedValue();
		else
			return "";
	}

	public String getPattern() {
		return pattText.getText();
	}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optGroup = new javax.swing.ButtonGroup();
        idOpt = new javax.swing.JRadioButton();
        annOpt = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        annList = new javax.swing.JList();
        patOpt = new javax.swing.JRadioButton();
        pattText = new javax.swing.JTextField();

        optGroup.add(idOpt);
        idOpt.setText("The ID");

        optGroup.add(annOpt);
        annOpt.setText("An annotation");

        annList.setEnabled(false);
        jScrollPane1.setViewportView(annList);

        optGroup.add(patOpt);
        patOpt.setText("A pattern");

        pattText.setText("${id}");
        pattText.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idOpt)
                            .addComponent(annOpt)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(pattText, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE))
                            .addComponent(patOpt))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idOpt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(annOpt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(patOpt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pattText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList annList;
    private javax.swing.JRadioButton annOpt;
    private javax.swing.JRadioButton idOpt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup optGroup;
    private javax.swing.JRadioButton patOpt;
    private javax.swing.JTextField pattText;
    // End of variables declaration//GEN-END:variables

}
