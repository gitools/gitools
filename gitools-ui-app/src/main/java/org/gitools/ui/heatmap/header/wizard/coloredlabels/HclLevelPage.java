/*
 *  Copyright 2011 Universitat Pompeu Fabra.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * HCLLevelPage.java
 *
 * Created on 25-mar-2011, 10:17:45
 */

package org.gitools.ui.heatmap.header.wizard.coloredlabels;

import javax.swing.DefaultListModel;
import org.gitools.clustering.HierarchicalClusteringResults;
import org.gitools.heatmap.header.HeatmapHierarchicalColoredLabelsHeader;
import org.gitools.newick.NewickTree;
import org.gitools.ui.platform.wizard.AbstractWizardPage;


public class HclLevelPage extends AbstractWizardPage {

	private HeatmapHierarchicalColoredLabelsHeader header;

    public HclLevelPage(HeatmapHierarchicalColoredLabelsHeader header) {
		this.header = header;
		
        initComponents();

		DefaultListModel model = new DefaultListModel();
		HierarchicalClusteringResults hclResults = header.getClusteringResults();
		NewickTree tree = hclResults.getTree();
		int maxLevels = tree.getDepth() - 1;
		if (maxLevels < 1)
			maxLevels = 1;

		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < maxLevels; i++) {
			sb.append("Level ").append(i).append(": ");
			sb.append(tree.getRoot().getLeaves(i).size());
			sb.append(" clusters");
			model.addElement(sb.toString());
			sb.setLength(0);
		}

		levels.setModel(model);

		setTitle("Hierarchical clustering tree level");
		setComplete(true);
    }

	@Override
	public void updateControls() {
		super.updateControls();

		levels.setSelectedIndex(header.getTreeLevel());
	}

	public int getLevel() {
		int level = levels.getSelectedIndex();
		if (level == -1)
			level = 0;
		return level;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        levels = new javax.swing.JList();

        levels.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(levels);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList levels;
    // End of variables declaration//GEN-END:variables

}
