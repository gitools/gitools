/*
 *  Copyright 2011 Universitat Pompeu Fabra.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * ColoredClustersAnnotationsPage.java
 *
 * Created on 02-mar-2011, 8:08:28
 */

package org.gitools.ui.heatmap.header.wizard.heatmapheader;

import edu.upf.bg.aggregation.AggregatorFactory;
import edu.upf.bg.aggregation.IAggregator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.gitools.heatmap.Heatmap;
import org.gitools.matrix.model.element.IElementAttribute;
import org.gitools.ui.platform.wizard.AbstractWizardPage;

public class AggregationDataSourcePage extends AbstractWizardPage {

    private Heatmap heatmap;
    private String[] cellAttributes;
    private String[] aggregatorNames;
    private IAggregator[] aggregatorsArray;
    private boolean applyToRows;


	public AggregationDataSourcePage(Heatmap heatmap, boolean applyToRows) {
        this.heatmap = heatmap;

        List<IElementAttribute> attributes =  heatmap.getMatrixView().getCellAttributes();
        cellAttributes = new String[attributes.size()];
        for (int i = 0; i < attributes.size(); i++)
            this.cellAttributes[i] = attributes.get(i).getName();

        this.aggregatorsArray = AggregatorFactory.getAggregatorsArray();
        this.aggregatorNames = new String[aggregatorsArray.length];
        for (int i = 0; i < aggregatorsArray.length; i++)
            this.aggregatorNames[i] = aggregatorsArray[i].toString();

        this.applyToRows = applyToRows;
		initComponents();
        updateModel();

        valueCb.setModel(new DefaultComboBoxModel(cellAttributes));
        valueCb.setSelectedIndex(heatmap.getMatrixView().getSelectedPropertyIndex());
        valueCb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateControls();
            }
        });

        aggregatorCb.setModel(new DefaultComboBoxModel(aggregatorNames));
        aggregatorCb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateControls();
            }
        });

        if (applyToRows) {
            useAllRb.setText("Use values from all columns");
            useSelectedRb.setText("Use values from selected columns");
        } else {
            useAllRb.setText("Use values from all rows");
            useSelectedRb.setText("Use values from selected rows");
        }

        setTitle("Choose the data source for the header to add");

    }

    public IAggregator getDataAggregator () {
        return aggregatorsArray[aggregatorCb.getSelectedIndex()];
    }
    
    public int getSelectedDataValueIndex() {
        return valueCb.getSelectedIndex();
    }

    public String getSelectedDataValueName() {
        return valueCb.getSelectedItem().toString();
    }
    
    public boolean useAllColumnsOrRows() {
        return useAllRb.isSelected();
    }

	private void updateCompleted() {
		boolean completed = aggregatorCb.getSelectedIndex() > -1 && valueCb.getSelectedIndex() > -1;
		setComplete(completed);
	}

    @Override
    public void updateControls() {
        updateCompleted();
    }


	@Override
	public void updateModel() {
        super.updateModel();
	}



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allOrSelected = new javax.swing.ButtonGroup();
        valueCb = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        aggregatorCb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        useAllRb = new javax.swing.JRadioButton();
        useSelectedRb = new javax.swing.JRadioButton();

        valueCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Select data value");

        aggregatorCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Value aggregation");

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 0, 11));
        jLabel3.setText("The way the the row/column will be aggregated into one value");

        allOrSelected.add(useAllRb);
        useAllRb.setSelected(true);
        useAllRb.setText("use all");
        useAllRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAllRbActionPerformed(evt);
            }
        });

        allOrSelected.add(useSelectedRb);
        useSelectedRb.setText("use selected");
        useSelectedRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSelectedRbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueCb, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(aggregatorCb, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useAllRb)
                    .addComponent(useSelectedRb))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(valueCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aggregatorCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(useAllRb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useSelectedRb)
                .addContainerGap(120, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useAllRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAllRbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useAllRbActionPerformed

    private void useSelectedRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSelectedRbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useSelectedRbActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox aggregatorCb;
    private javax.swing.ButtonGroup allOrSelected;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton useAllRb;
    private javax.swing.JRadioButton useSelectedRb;
    private javax.swing.JComboBox valueCb;
    // End of variables declaration//GEN-END:variables

}
