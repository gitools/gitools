/*
 *  Copyright 2011 chris.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * ColoredClustersAnnotationsPage.java
 *
 * Created on 02-mar-2011, 8:08:28
 */

package org.gitools.ui.heatmap.header.coloredlabels;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.gitools.clustering.method.annotations.AnnPatClusteringMethod;
import org.gitools.heatmap.HeatmapDim;
import org.gitools.matrix.model.AnnotationMatrix;
import org.gitools.ui.platform.wizard.AbstractWizardPage;
import org.gitools.ui.utils.DocumentChangeListener;

public class ColoredLabelsSourcePage extends AbstractWizardPage {

	private HeatmapDim hdim;
	private AnnPatClusteringMethod method;

	public ColoredLabelsSourcePage(HeatmapDim hdim, AnnPatClusteringMethod method) {
		this.hdim = hdim;
		this.method = method;
		
		initComponents();

		ChangeListener optListener = new ChangeListener() {
			@Override public void stateChanged(ChangeEvent e) {
				sourceChanged(); }
		};

		annOpt.addChangeListener(optListener);
		patOpt.addChangeListener(optListener);

		AnnotationMatrix am = hdim.getAnnotations();
		if (am != null && am.getColumnCount() > 0) {
			annOpt.setSelected(true);
			DefaultListModel model = new DefaultListModel();
			for (int i = 0; i < am.getColumnCount(); i++)
				model.addElement(am.getColumnLabel(i));
			annList.setModel(model);
			annList.setSelectedIndex(0);
		}
		else {
			patOpt.setSelected(true);
			annOpt.setEnabled(false);
		}
		
		annList.addListSelectionListener(new ListSelectionListener() {
			@Override public void valueChanged(ListSelectionEvent e) {
				updateCompleted(); }
		});
		
		annSepCb.setModel(new DefaultComboBoxModel(
				new String[] {", ", "-", " | ", " / ", " > ", "::"}));
		annSepCb.setSelectedIndex(0);

		patText.getDocument().addDocumentListener(new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateCompleted(); }
		});

		setTitle("Annotations selection");
		setComplete(true);
	}

	private void updateCompleted() {
		boolean completed =
				annOpt.isSelected() && annList.getSelectedIndices().length > 0
				|| patOpt.isSelected() && patText.getDocument().getLength() > 0;
		
		setComplete(completed);
	}

	private void sourceChanged() {
		boolean annSel = annOpt.isSelected();
		annList.setEnabled(annSel);
		annSepLabel.setEnabled(annSel);
		annSepCb.setEnabled(annSel);
		patText.setEnabled(patOpt.isSelected());
	}

	@Override
	public void updateModel() {
		super.updateModel();

		method.setPattern(getPattern());
	}

	public String getPattern() {
		if (patOpt.isSelected())
			return patText.getText();

		AnnotationMatrix am = hdim.getAnnotations();
		StringBuilder sb = new StringBuilder();
		int[] indices = annList.getSelectedIndices();

		sb.append("${");
		sb.append(am.getColumnLabel(indices[0]));
		sb.append("}");
		for (int i = 1; i < indices.length; i++) {
			sb.append(annSepCb.getSelectedItem());
			sb.append("${");
			sb.append(am.getColumnLabel(indices[i]));
			sb.append("}");
		}

		return sb.toString();
	}

	public String getClusterTitle() {
		if (patOpt.isSelected())
			return patText.getText();

		AnnotationMatrix am = hdim.getAnnotations();
		StringBuilder sb = new StringBuilder();
		int[] indices = annList.getSelectedIndices();

		sb.append(am.getColumnLabel(indices[0]));
		for (int i = 1; i < indices.length; i++) {
			sb.append(annSepCb.getSelectedItem());
			sb.append(am.getColumnLabel(indices[i]));
		}

		return sb.toString();
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optGroup = new javax.swing.ButtonGroup();
        annOpt = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        annList = new javax.swing.JList();
        patOpt = new javax.swing.JRadioButton();
        patText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        annSepLabel = new javax.swing.JLabel();
        annSepCb = new javax.swing.JComboBox();

        optGroup.add(annOpt);
        annOpt.setText("Create labels by selecting a set of annotations");

        jScrollPane1.setViewportView(annList);

        optGroup.add(patOpt);
        patOpt.setText("Create labels by using a pattern");

        patText.setText("${id}");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()-2f));
        jLabel1.setText("Press Ctrl key while selecting for multiple annotations");

        annSepLabel.setText("Separator");

        annSepCb.setEditable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(patText, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(annSepLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(annSepCb, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(annOpt))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(patOpt)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(annOpt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annSepLabel)
                    .addComponent(annSepCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(patOpt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList annList;
    private javax.swing.JRadioButton annOpt;
    private javax.swing.JComboBox annSepCb;
    private javax.swing.JLabel annSepLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup optGroup;
    private javax.swing.JRadioButton patOpt;
    private javax.swing.JTextField patText;
    // End of variables declaration//GEN-END:variables

}
