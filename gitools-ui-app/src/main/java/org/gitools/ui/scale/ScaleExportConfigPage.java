/*
 *  Copyright 2010 Universitat Pompeu Fabra.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * ScaleExportConfigPage.java
 *
 * Created on 21-abr-2010, 21:09:17
 */

package org.gitools.ui.scale;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import org.gitools.ui.platform.dialog.MessageStatus;
import org.gitools.ui.platform.wizard.AbstractWizardPage;
import org.gitools.ui.utils.DocumentChangeListener;

public class ScaleExportConfigPage extends AbstractWizardPage {

    /** Creates new form ScaleExportConfigPage */
    public ScaleExportConfigPage() {
        initComponents();

		setTitle("Scale export settings");

		DocumentChangeListener docListener = new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				validateValues(); } };

		partialRangeCheck.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent e) {
				rangeMin.setEnabled(partialRangeCheck.isSelected());
				rangeMax.setEnabled(partialRangeCheck.isSelected());
			}
		});

		scaleSize.getDocument().addDocumentListener(docListener);
		rangeMin.getDocument().addDocumentListener(docListener);
		rangeMax.getDocument().addDocumentListener(docListener);

		setComplete(true);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        partialRangeCheck = new javax.swing.JCheckBox();
        rangeMin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        rangeMax = new javax.swing.JTextField();
        scaleSize = new javax.swing.JTextField();

        jLabel1.setText("Size (in pixels)");

        partialRangeCheck.setText("Export only values from");

        rangeMin.setColumns(5);
        rangeMin.setText("0");
        rangeMin.setEnabled(false);

        jLabel2.setText("to");

        rangeMax.setColumns(5);
        rangeMax.setText("0");
        rangeMax.setEnabled(false);

        scaleSize.setColumns(6);
        scaleSize.setText("1024");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scaleSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(partialRangeCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rangeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rangeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(scaleSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partialRangeCheck)
                    .addComponent(rangeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(rangeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(340, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	@Override
	public JComponent createControls() {
		return this;
	}

	protected void validateValues() {
		setComplete(true);
		setMessage(MessageStatus.INFO, "");

		try {
			Double.parseDouble(rangeMin.getText());
		}
		catch (NumberFormatException ex) {
			setComplete(false);
			setMessage(MessageStatus.ERROR, "Invalid range value: " + rangeMin.getText());
		}

		try {
			Double.parseDouble(rangeMax.getText());
		}
		catch (NumberFormatException ex) {
			setComplete(false);
			setMessage(MessageStatus.ERROR, "Invalid range value: " + rangeMax.getText());
		}

		try {
			Integer.parseInt(scaleSize.getText());
		}
		catch (NumberFormatException ex) {
			setComplete(false);
			setMessage(MessageStatus.ERROR, "Invalid size: " + scaleSize.getText());
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox partialRangeCheck;
    private javax.swing.JTextField rangeMax;
    private javax.swing.JTextField rangeMin;
    private javax.swing.JTextField scaleSize;
    // End of variables declaration//GEN-END:variables

	public void setRange(double min, double max) {
		rangeMin.setText(Double.toString(min));
		rangeMax.setText(Double.toString(max));
	}

	public boolean isPartialRange() {
		return partialRangeCheck.isSelected();
	}

	public double getRangeMin() {
		return Double.parseDouble(rangeMin.getText());
	}

	public double getRangeMax() {
		return Double.parseDouble(rangeMax.getText());
	}

	public int getScaleSize() {
		return Integer.parseInt(scaleSize.getText());
	}
}
