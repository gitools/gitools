/*
 *  Copyright 2011 cperez.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * SortPage.java
 *
 * Created on 21-mar-2011, 10:22:15
 */
package org.gitools.ui.sort;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import org.gitools.heatmap.Heatmap;
import org.gitools.matrix.sort.ValueSortCriteria.SortDirection;
import org.gitools.ui.wizard.common.PatternSourcePage;
import org.gitools.ui.platform.AppFrame;
import org.gitools.ui.platform.wizard.AbstractWizardPage;
import org.gitools.ui.platform.wizard.PageDialog;
import org.gitools.ui.utils.DocumentChangeListener;

public class LabelSortPage extends AbstractWizardPage {

	private Heatmap hm;

	private String rowsPat;
	private String colsPat;

	public LabelSortPage(Heatmap hm) {
		this.hm = hm;
		
		initComponents();

		rowsLabelFld.setText("id");
		rowsPat = "${id}";

		colsLabelFld.setText("id");
		colsPat = "${id}";

		ActionListener dimListener = new ActionListener() {
			@Override public void actionPerformed(ActionEvent ae) {
				dimChanged(); }
		};

		rowsChk.addActionListener(dimListener);
		colsChk.addActionListener(dimListener);

		rowsLabelFld.getDocument().addDocumentListener(new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateComplete(); }
		});

		rowsLabelBtn.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent ae) {
				selectRowsPattern(); }
		});

		rowsDirCb.setModel(new DefaultComboBoxModel(SortDirection.values()));

		colsLabelFld.getDocument().addDocumentListener(new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateComplete(); }
		});

		colsLabelBtn.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent ae) {
				selectColsPattern(); }
		});

		colsDirCb.setModel(new DefaultComboBoxModel(SortDirection.values()));
		
		setTitle("Sort by label");
		updateComplete();
	}

	@Override
	public void updateControls() {
		dimChanged();
	}

	private void updateComplete() {
		setComplete((rowsChk.isSelected() || colsChk.isSelected())
				&& !((rowsChk.isSelected() && rowsLabelFld.getText().isEmpty())
					|| (colsChk.isSelected() && colsLabelFld.getText().isEmpty())));
	}

	private void dimChanged() {
		boolean rs = rowsChk.isSelected();
		rowsLabelFld.setEnabled(rs);
		rowsLabelBtn.setEnabled(rs);
		rowsDirCb.setEnabled(rs);

		boolean cs = colsChk.isSelected();
		colsLabelFld.setEnabled(cs);
		colsLabelBtn.setEnabled(cs);
		colsDirCb.setEnabled(cs);

		updateComplete();
	}

	private void selectRowsPattern() {
		PatternSourcePage page = new PatternSourcePage(hm.getRowDim().getAnnotations(), true);
		PageDialog dlg = new PageDialog(AppFrame.instance(), page);
		dlg.setVisible(true);
		if (dlg.isCancelled())
			return;

		rowsPat = page.getPattern();
		rowsLabelFld.setText(page.getPatternTitle());
	}

	private void selectColsPattern() {
		PatternSourcePage page = new PatternSourcePage(hm.getColumnDim().getAnnotations(), true);
		PageDialog dlg = new PageDialog(AppFrame.instance(), page);
		dlg.setVisible(true);
		if (dlg.isCancelled())
			return;

		colsPat = page.getPattern();
		colsLabelFld.setText(page.getPatternTitle());
	}

	public boolean isApplyToRowsSelected() {
		return rowsChk.isSelected();
	}

	public String getRowsPattern() {
		return rowsPat;
	}

	public SortDirection getRowsDirection() {
		return (SortDirection) rowsDirCb.getSelectedItem();
	}

	public boolean isApplyToColumnsSelected() {
		return colsChk.isSelected();
	}

	public String getColumnsPattern() {
		return colsPat;
	}

	public SortDirection getColumnsDirection() {
		return (SortDirection) colsDirCb.getSelectedItem();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        rowsDirCb = new javax.swing.JComboBox();
        rowsChk = new javax.swing.JCheckBox();
        rowsLabelFld = new javax.swing.JTextField();
        rowsLabelBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        colsChk = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        colsLabelFld = new javax.swing.JTextField();
        colsLabelBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        colsDirCb = new javax.swing.JComboBox();

        jLabel1.setText("Direction");

        rowsChk.setSelected(true);
        rowsChk.setText("Rows");

        rowsLabelFld.setEditable(false);

        rowsLabelBtn.setText("Change...");

        jLabel2.setText("Label");

        colsChk.setText("Columns");

        jLabel3.setText("Label");

        colsLabelFld.setEditable(false);

        colsLabelBtn.setText("Change...");

        jLabel4.setText("Direction");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rowsChk)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rowsDirCb, 0, 204, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rowsLabelFld, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowsLabelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colsChk)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(colsDirCb, 0, 204, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(colsLabelFld, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colsLabelBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rowsChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rowsLabelFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsLabelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rowsDirCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(colsChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(colsLabelFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colsLabelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(colsDirCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox colsChk;
    private javax.swing.JComboBox colsDirCb;
    private javax.swing.JButton colsLabelBtn;
    private javax.swing.JTextField colsLabelFld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox rowsChk;
    private javax.swing.JComboBox rowsDirCb;
    private javax.swing.JButton rowsLabelBtn;
    private javax.swing.JTextField rowsLabelFld;
    // End of variables declaration//GEN-END:variables
}
