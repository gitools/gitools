/*
 *  Copyright 2009 cperez.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * SaveFilePage.java
 *
 * Created on Dec 18, 2009, 5:49:09 PM
 */

package org.gitools.ui.wizard.common;

import org.gitools.persistence.FileFormat;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import org.gitools.ui.IconNames;
import org.gitools.ui.platform.IconUtils;
import org.gitools.ui.platform.dialog.MessageStatus;
import org.gitools.ui.utils.DocumentChangeListener;
import org.gitools.ui.utils.FileChooserUtils;
import org.gitools.ui.platform.wizard.AbstractWizardPage;

public class SaveFilePage extends AbstractWizardPage {

	private FileFormat[] formats;

    /** Creates new form SaveFilePage */
    public SaveFilePage() {
		setLogo(IconUtils.getImageIconResourceScaledByHeight(IconNames.LOGO_SAVE, 96));

        initComponents();

		fileName.getDocument().addDocumentListener(new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				setComplete(!fileName.getText().isEmpty());
				updateGeneratedFile();
			}
		});

		folder.getDocument().addDocumentListener(new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateGeneratedFile(); }
		});

		format.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent e) {
				updateGeneratedFile(); }
		});
    }

	private void updateGeneratedFile() {
		File file = getFile();
		String fn = file.getAbsolutePath();
		path.setText(fn);
		if (isComplete() && file.exists())
			setMessage(MessageStatus.WARN, "File " + file.getName() + " already exists");
		else
			setMessage(MessageStatus.INFO, "");

		fn = fn.toLowerCase();
		FileFormat fmt = getFormat();
		final String ext = fmt != null ? fmt.getExtension().toLowerCase() : "";
		final String extgz = ext + ".gz";
		if (formats != null && formats.length > 1
				&& fmt != null && !(fn.endsWith(ext) || fn.endsWith(extgz)))
			setMessage(MessageStatus.WARN, "The file extension doesn't match the selected format");
	}

	@Override
	public JComponent createControls() {
		return this;
	}

	public String getFileName() {
		return fileName.getText();
	}

	public void setFileName(String name) {
		fileName.setText(name);
	}
	
	public String getFolder() {
		return folder.getText();
	}

	public void setFolder(String folderPath) {
		folder.setText(folderPath);
	}

	public void setFormats(FileFormat[] formats) {
		/*boolean active = formats != null && formats.length > 0;
		formatLabel.setVisible(active);
		format.setVisible(active);*/
		this.formats = formats;
		format.setModel(new DefaultComboBoxModel(formats));
		updateGeneratedFile();
	}

	public FileFormat getFormat() {
		return (FileFormat) format.getSelectedItem();
	}

	public void setFormatsVisible(boolean visible) {
		formatLabel.setVisible(visible);
		format.setVisible(visible);
	}

	public String getFilePath() {
		StringBuilder sb = new StringBuilder();
		String name = getFileName();
		sb.append(name);
		File file = new File(name);

		String ext = FileChooserUtils.getExtension(file);
		if (!name.isEmpty() && (ext == null) && format.getSelectedIndex() >= 0) {
			FileFormat fmt = (FileFormat) format.getSelectedItem();
			if (!name.endsWith("."))
				sb.append('.');
			sb.append(fmt.getExtension());
		}

		return sb.toString();
	}

	public File getFile() {
		String folderName = folder.getText();
		if (folderName.isEmpty())
			folderName = System.getProperty("user.dir");

		return new File(folderName, getFilePath());
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        folder = new javax.swing.JTextField();
        formatLabel = new javax.swing.JLabel();
        format = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        path = new javax.swing.JTextField();

        jLabel1.setText("Name");

        fileName.setFocusCycleRoot(true);

        browseBtn.setText("Browse...");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Folder");

        formatLabel.setText("Format");

        jLabel4.setText("Generated file");

        path.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(formatLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(format, 0, 390, Short.MAX_VALUE)
                            .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                            .addComponent(folder, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(path, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(folder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatLabel)
                    .addComponent(format, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(243, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
		File selPath = FileChooserUtils.selectPath(
				"Select folder", folder.getText());

		if (selPath != null)
			folder.setText(selPath.getAbsolutePath());
	}//GEN-LAST:event_browseBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseBtn;
    private javax.swing.JTextField fileName;
    private javax.swing.JTextField folder;
    private javax.swing.JComboBox format;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField path;
    // End of variables declaration//GEN-END:variables

}
