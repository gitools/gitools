/*
 * DataSourcePanel.java
 *
 * Created on September 4, 2009, 1:58 PM
 */

package org.gitools.ui.analysis.htest.wizard;

import edu.upf.bg.cutoffcmp.CutoffCmp;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import org.gitools.ui.platform.dialog.MessageStatus;
import org.gitools.ui.platform.wizard.AbstractWizardPage;
import org.gitools.ui.settings.Settings;
import org.gitools.ui.utils.DocumentChangeListener;
import org.gitools.ui.utils.FileChooserUtils;

public class DataPage extends AbstractWizardPage {

	private static final long serialVersionUID = 3840797252370672587L;
	
	/** Creates new form DataSourcePanel */
    public DataPage() {
		setTitle("Select data source");
		
        initComponents();

		dataContentsCb.setModel(new DefaultComboBoxModel(DataContents.values()));
		dataContentsCb.addActionListener(new ActionListener() {
			@Override public void actionPerformed(ActionEvent e) {
				updateState(); }
		});

		DocumentChangeListener docCompleteListener = new DocumentChangeListener() {
			@Override protected void update(DocumentEvent e) {
				updateState(); }
		};

		ItemListener itemListener = new ItemListener() {
			@Override public void itemStateChanged(ItemEvent e) {
				updateState(); }
		};

		bgDataRb.addItemListener(itemListener);
		bgAnnotatedRb.addItemListener(itemListener);

		filePath.getDocument().addDocumentListener(docCompleteListener);

		rowFilterEnabledCheck.addItemListener(itemListener);
		rowFilterFilePath.getDocument().addDocumentListener(docCompleteListener);
		rowFilterIncludeRb.addItemListener(itemListener);
		rowFilterExcludeRb.addItemListener(itemListener);

		cutoffEnabledCheck.addItemListener(itemListener);
		String[] cmpNames = new String[CutoffCmp.comparators.length];
		for (int i = 0; i < cmpNames.length; i++)
			cmpNames[i] = CutoffCmp.comparators[i].getLongName();
		cutoffCmpCb.setModel(new DefaultComboBoxModel(cmpNames));

		cutoffValue.getDocument().addDocumentListener(docCompleteListener);
		cutoffValue.setText("1.5");
    }

	private void updateState() {
		boolean filteringControlsEnabled =
				((DataContents) dataContentsCb.getSelectedItem()) != DataContents.LIST_OF_ELEMENTS;

		cutoffEnabledCheck.setEnabled(filteringControlsEnabled);
		cutoffCmpCb.setEnabled(filteringControlsEnabled && cutoffEnabledCheck.isSelected());
		cutoffValue.setEnabled(filteringControlsEnabled && cutoffEnabledCheck.isSelected());

		rowFilterFilePath.setEnabled(rowFilterEnabledCheck.isSelected());
		rowFilterFileBrowseBtn.setEnabled(rowFilterEnabledCheck.isSelected());

		setMessage(MessageStatus.INFO, "");

		boolean c = !filePath.getText().isEmpty();
		
		if (cutoffEnabledCheck.isSelected()) {
			boolean fail = false;
			try {
				Double.valueOf(cutoffValue.getText());}
			catch (NumberFormatException e) {
				fail = true;
				setStatus(MessageStatus.ERROR);
				setMessage("Cutoff value should be a real number.");
			}

			c &= !fail && !cutoffValue.getText().isEmpty();
		}

		setComplete(c);
	}

	@Override
	public JComponent createControls() {
		return this;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        dataContentsCb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        fileBrowseBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        bgDataRb = new javax.swing.JRadioButton();
        bgAnnotatedRb = new javax.swing.JRadioButton();
        rowFilterFilePath = new javax.swing.JTextField();
        rowFilterFileBrowseBtn = new javax.swing.JButton();
        cutoffEnabledCheck = new javax.swing.JCheckBox();
        cutoffCmpCb = new javax.swing.JComboBox();
        cutoffValue = new javax.swing.JTextField();
        rowFilterEnabledCheck = new javax.swing.JCheckBox();
        rowFilterIncludeRb = new javax.swing.JRadioButton();
        rowFilterExcludeRb = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("Data contents");

        dataContentsCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lists of elements", "Binary data matrix", "Continuous data matrix" }));

        jLabel2.setText("File");

        fileBrowseBtn.setText("Browse...");
        fileBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowseBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Take background population from:");

        buttonGroup1.add(bgDataRb);
        bgDataRb.setSelected(true);
        bgDataRb.setText("All the data elements");

        buttonGroup1.add(bgAnnotatedRb);
        bgAnnotatedRb.setText("Only the data elements with module annotation");

        rowFilterFilePath.setEnabled(false);

        rowFilterFileBrowseBtn.setText("Browse...");
        rowFilterFileBrowseBtn.setEnabled(false);
        rowFilterFileBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowFilterFileBrowseBtnActionPerformed(evt);
            }
        });

        cutoffEnabledCheck.setText("Transform to 1, 0 otherwise, cells with value");
        cutoffEnabledCheck.setEnabled(false);

        cutoffCmpCb.setEnabled(false);

        cutoffValue.setColumns(6);
        cutoffValue.setEnabled(false);

        rowFilterEnabledCheck.setText("Filter rows by label from the file");
        rowFilterEnabledCheck.setEnabled(false);

        buttonGroup2.add(rowFilterIncludeRb);
        rowFilterIncludeRb.setSelected(true);
        rowFilterIncludeRb.setText("Include only rows which labels are in the file");
        rowFilterIncludeRb.setEnabled(false);

        buttonGroup2.add(rowFilterExcludeRb);
        rowFilterExcludeRb.setText("Exclude rows which labels are in the file");
        rowFilterExcludeRb.setEnabled(false);

        jLabel4.setText("Filters:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataContentsCb, 0, 553, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePath, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileBrowseBtn))
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rowFilterEnabledCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowFilterFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowFilterFileBrowseBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rowFilterExcludeRb)
                            .addComponent(rowFilterIncludeRb)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cutoffEnabledCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutoffCmpCb, 0, 254, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutoffValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(bgDataRb)
                    .addComponent(bgAnnotatedRb))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataContentsCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(fileBrowseBtn)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowFilterEnabledCheck)
                    .addComponent(rowFilterFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowFilterFileBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowFilterIncludeRb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowFilterExcludeRb)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cutoffEnabledCheck)
                    .addComponent(cutoffCmpCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cutoffValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bgDataRb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bgAnnotatedRb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void fileBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowseBtnActionPerformed
		File selPath = FileChooserUtils.selectFile(
				"Select file",
				Settings.getDefault().getLastDataPath(),
				FileChooserUtils.MODE_OPEN);

		if (selPath != null) {
			filePath.setText(selPath.getAbsolutePath());
			Settings.getDefault().setLastDataPath(selPath.getAbsolutePath());
		}
	}//GEN-LAST:event_fileBrowseBtnActionPerformed

	private void rowFilterFileBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowFilterFileBrowseBtnActionPerformed
		File selPath = FileChooserUtils.selectFile(
				"Select file",
				Settings.getDefault().getLastPath(),
				FileChooserUtils.MODE_OPEN);

		if (selPath != null) {
			rowFilterFilePath.setText(selPath.getAbsolutePath());
			Settings.getDefault().setLastPath(selPath.getAbsolutePath());
		}
	}//GEN-LAST:event_rowFilterFileBrowseBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bgAnnotatedRb;
    private javax.swing.JRadioButton bgDataRb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cutoffCmpCb;
    private javax.swing.JCheckBox cutoffEnabledCheck;
    private javax.swing.JTextField cutoffValue;
    private javax.swing.JComboBox dataContentsCb;
    private javax.swing.JButton fileBrowseBtn;
    private javax.swing.JTextField filePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox rowFilterEnabledCheck;
    private javax.swing.JRadioButton rowFilterExcludeRb;
    private javax.swing.JButton rowFilterFileBrowseBtn;
    private javax.swing.JTextField rowFilterFilePath;
    private javax.swing.JRadioButton rowFilterIncludeRb;
    // End of variables declaration//GEN-END:variables

	public DataContents getDataContents() {
		return (DataContents) dataContentsCb.getSelectedItem();
	}

	public File getSelectedFile() {
		return new File(filePath.getText());
	}

	public boolean isBinaryCutoffEnabled() {
		return cutoffEnabledCheck.isSelected();
	}

	public CutoffCmp getBinaryCutoffCmp() {
		return CutoffCmp.getFromName((String) cutoffCmpCb.getSelectedItem());
	}

	public double getBinaryCutoffValue() {
		return Double.parseDouble(cutoffValue.getText());
	}

	public boolean isDiscardNonMappedRows() {
		return bgAnnotatedRb.isSelected();
	}
}
