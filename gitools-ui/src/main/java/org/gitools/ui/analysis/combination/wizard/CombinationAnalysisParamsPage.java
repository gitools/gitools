/*
 *  Copyright 2010 cperez.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * CombinationAnalysisParamsPage.java
 *
 * Created on Oct 8, 2010, 4:29:30 PM
 */

package org.gitools.ui.analysis.combination.wizard;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.gitools.matrix.model.element.IElementAttribute;
import org.gitools.ui.platform.wizard.AbstractWizardPage;

public class CombinationAnalysisParamsPage extends AbstractWizardPage {

	private List<IElementAttribute> attrs;

	private static class AttrOption {
		private String name;
		private IElementAttribute attr;

		public AttrOption(String name) {
			this.name = name;
		}

		public AttrOption(IElementAttribute attr) {
			this.attr = attr;
		}

		public IElementAttribute getAttr() {
			return attr;
		}

		@Override
		public String toString() {
			return attr != null ? attr.getName() : name;
		}
	}

    public CombinationAnalysisParamsPage() {
        initComponents();
    }

	public void setAttributes(List<IElementAttribute> attrs) {
		this.attrs = attrs;

		if (attrs == null) {
			sizeAttrCb.setModel(new DefaultComboBoxModel());
			sizeAttrLabel.setEnabled(false);
			sizeAttrCb.setEnabled(false);
			pvalueAttrCb.setModel(new DefaultComboBoxModel());
			pvalueAttrLabel.setEnabled(false);
			pvalueAttrCb.setEnabled(false);
		}
		else {
			AttrOption[] sizeAttrs = new AttrOption[attrs.size() + 1];
			sizeAttrs[0] = new AttrOption("All columns with the same weight");
			for (int i = 0; i < attrs.size(); i++)
				sizeAttrs[i + 1] = new AttrOption(attrs.get(i));
			sizeAttrCb.setModel(new DefaultComboBoxModel(sizeAttrs));

			Object[] attrsArray = attrs.toArray();
			pvalueAttrCb.setModel(new DefaultComboBoxModel(attrsArray));

			int sizeIndex = -1;
			int pvalueIndex = -1;
			int i = 0;
			for (IElementAttribute a : attrs) {
				if (sizeIndex == -1 && a.getId().matches("n|N"))
					sizeIndex = i;
				if (pvalueIndex == -1 && a.getId().matches("p-value"))
					pvalueIndex = i;
				i++;
			}

			sizeIndex = sizeIndex == -1 ? 0 : sizeIndex;
			pvalueIndex = pvalueIndex == -1 ? 0 : pvalueIndex;
			sizeAttrCb.setSelectedIndex(sizeIndex);
			pvalueAttrCb.setSelectedIndex(pvalueIndex);
			sizeAttrLabel.setEnabled(true);
			sizeAttrCb.setEnabled(true);
			pvalueAttrLabel.setEnabled(true);
			pvalueAttrCb.setEnabled(true);
		}
	}

	public IElementAttribute getSizeAttribute() {
		return ((AttrOption) sizeAttrCb.getSelectedItem()).getAttr();
	}

	public IElementAttribute getPvalueAttribute() {
		return (IElementAttribute) pvalueAttrCb.getSelectedItem();
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applyButtonGroup = new javax.swing.ButtonGroup();
        sizeAttrLabel = new javax.swing.JLabel();
        sizeAttrCb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        applyToColumnsRb = new javax.swing.JRadioButton();
        applyToRowsRb = new javax.swing.JRadioButton();
        pvalueAttrLabel = new javax.swing.JLabel();
        pvalueAttrCb = new javax.swing.JComboBox();

        sizeAttrLabel.setText("Size attribute");

        jLabel2.setText("Apply to:");

        applyButtonGroup.add(applyToColumnsRb);
        applyToColumnsRb.setSelected(true);
        applyToColumnsRb.setText("Columns");

        applyButtonGroup.add(applyToRowsRb);
        applyToRowsRb.setText("Rows");

        pvalueAttrLabel.setText("P-value attribute");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sizeAttrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pvalueAttrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sizeAttrCb, 0, 304, Short.MAX_VALUE)
                            .addComponent(pvalueAttrCb, javax.swing.GroupLayout.Alignment.LEADING, 0, 304, Short.MAX_VALUE)))
                    .addComponent(jLabel2)
                    .addComponent(applyToColumnsRb)
                    .addComponent(applyToRowsRb))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeAttrLabel)
                    .addComponent(sizeAttrCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pvalueAttrLabel)
                    .addComponent(pvalueAttrCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyToColumnsRb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyToRowsRb)
                .addContainerGap(125, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup applyButtonGroup;
    private javax.swing.JRadioButton applyToColumnsRb;
    private javax.swing.JRadioButton applyToRowsRb;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox pvalueAttrCb;
    private javax.swing.JLabel pvalueAttrLabel;
    private javax.swing.JComboBox sizeAttrCb;
    private javax.swing.JLabel sizeAttrLabel;
    // End of variables declaration//GEN-END:variables

}
