/*
 *  Copyright 2010 xavi.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * BiomartFilterConfigurationPage.java
 *
 * Created on 28-mar-2010, 19:22:00
 */
package org.gitools.ui.biomart.filter;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.gitools.biomart.restful.model.DatasetConfig;
import org.gitools.biomart.restful.model.FilterGroup;
import org.gitools.biomart.restful.model.FilterPage;
import org.gitools.biomart.restful.model.AttributeDescription;

public class FilterConfigurationPanel extends javax.swing.JPanel {

	DatasetConfig dsConfig;
	private FilterGroup groupSelected;
	private FilterPage pageSelected;


	public DatasetConfig getDatasetConfiguration() {
		return dsConfig;
	}

	public void setDatasetConfiguration(DatasetConfig ds) {
		this.dsConfig = ds;

		if (ds != null) 
			updatePageFilterList();

	}

	/** Creates new form BiomartFilterConfigurationPage */
	public FilterConfigurationPanel() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterPageCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        filterGroupList = new javax.swing.JList();

        filterPageCombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                filterPageComboPropertyChange(evt);
            }
        });

        jLabel1.setText("Page");

        filterGroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filterGroupList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filterGroupListValueChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterGroupList, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterPageCombo, 0, 502, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filterPageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(filterGroupList, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void filterGroupListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filterGroupListValueChanged
		// TODO add your handling code here:
		//pageSelected = ((PageListWrapper) this.filterPageCombo.getSelectedItem()).getFilterPage();
		groupSelected = ((GroupListWrapper) this.filterGroupList.getSelectedValue()).getFilterGroup();
		updateCollectionControls();
	}//GEN-LAST:event_filterGroupListValueChanged

	private void filterPageComboPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_filterPageComboPropertyChange
		// TODO add your handling code here:
		//pageSelected = ((PageListWrapper) filterPageCombo.getSelectedItem()).getFilterPage();
	}//GEN-LAST:event_filterPageComboPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList filterGroupList;
    private javax.swing.JComboBox filterPageCombo;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

	public List<AttributeDescription> getFilterList() {
		throw new UnsupportedOperationException("Not yet implemented");
	}

	public void updatePageFilterList() {

		DefaultComboBoxModel model = new DefaultComboBoxModel();

		for (FilterPage p : dsConfig.getFilterPages()) {
			if (p.getHideDisplay() == null || !p.getHideDisplay().equals("true")) {
				model.addElement(new PageListWrapper(p));
			}
		}


		this.filterPageCombo.setModel(model);

		updateGroupFilterList();

	}

	private void updateGroupFilterList() {

		DefaultListModel model = new DefaultListModel();

		if (this.filterPageCombo.getSelectedItem() != null) {
			FilterPage indexPage = ((PageListWrapper) this.filterPageCombo.getSelectedItem()).getFilterPage();

			for (FilterGroup g : indexPage.getFilterGroups()) {
				if (g.getHideDisplay() == null || !g.getHideDisplay().equals("true")) {
					model.addElement(new GroupListWrapper(g));
				}
			}
			this.filterGroupList.setModel(model);

		}

	}

	private void updateCollectionControls() {
		throw new UnsupportedOperationException("Not yet implemented");
	}

	private static class PageListWrapper {

		private FilterPage page;

		public PageListWrapper(FilterPage dataset) {
			this.page = dataset;
		}

		public FilterPage getFilterPage() {
			return page;
		}

		@Override
		public String toString() {
			
			String res = page.getDisplayName();
			if (res != null) {
				res = res.replace(":", "");
			}

			return res;
		}
	}

	private static class GroupListWrapper {

		private FilterGroup group;

		public GroupListWrapper(FilterGroup dataset) {
			this.group = dataset;
		}

		public FilterGroup getFilterGroup() {
			return group;
		}

		@Override
		public String toString() {

			String res = group.getDisplayName();
			if (res != null) {
				res = res.replace(":", "");
			}

			return res;
		}
	}
}
