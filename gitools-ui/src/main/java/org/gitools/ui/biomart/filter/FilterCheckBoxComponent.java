/*
 *  Copyright 2010 xavier.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */


package org.gitools.ui.biomart.filter;
import java.awt.GridLayout;
import javax.swing.JCheckBox;
import org.gitools.biomart.restful.model.Filter;
import org.gitools.biomart.restful.model.FilterDescription;
import org.gitools.biomart.restful.model.Option;

public class FilterCheckBoxComponent extends FilterComponent {

	private final Integer CHECK_HEIGHT = 45;

	public FilterCheckBoxComponent(FilterDescription d, FilterDescriptionPanel descriptionParent) {

		super(d, descriptionParent);
		initComponents();
		
		buildComponent();
	}

	public FilterCheckBoxComponent(Option o) {

		super(o);
		initComponents();

		buildComponent();
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

//FIXME : Test initialisation String list of options
	private void buildComponent() {

		//Retrieve list of text from options
		String[] options = getListTextOptions();

		if (options != null)
		{
			JCheckBox check = null;
			this.setLayout(new GridLayout(options.length,1));

			for (int i = 0; i < options.length; i++) {
				check = new JCheckBox(options[i]);
				this.add(check);
			}
			currentHeight = CHECK_HEIGHT * options.length;
		}

	}

	@Override
	// FIXME : Check if get filter from check value/s is correct
	public Filter getFilter() {

		Filter f = new Filter();		

		// Could happen filterDescription null, if this component is a child (belongs to a container component)
		if (filterDescription != null && filterDescription.getInternalName() != null)
			f.setName(filterDescription.getInternalName());

		for (JCheckBox checkBox : (JCheckBox[]) this.getComponents())						
			if (checkBox.isSelected()) 
				f.setValue(checkBox.getText());											

		return f;

	}

	@Override
	//Always render filter from select component filter
	public Boolean hasChanged() {
		return true;

	}

	/**
	 * If the component is child the text of each radio is obtained from filterOptions
	 * component
	 * @param child
	 * @return
	 */
	private String[] getListTextOptions() {
		String res[] = null;
		if (filterOptions!=null) {
			res = new String[filterOptions.getOptions().size()];
			for (int i = 0; i < filterOptions.getOptions().size(); i++) {
				res[i] = filterOptions.getOptions().get(i).getValue();
			}

		} else {
			if (filterDescription == null) return res;

			res = new String[filterDescription.getOptions().size()];

			for (int i = 0; i < filterDescription.getOptions().size(); i++) {
				res[i] = filterDescription.getOptions().get(i).getValue();
			}
		}
		return res;
	}
	
}
