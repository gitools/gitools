/*
 *  Copyright 2010 xavier.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * FilterSelecComponent1.java
 *
 * Created on Apr 2, 2010, 9:50:34 AM
 */

package org.gitools.ui.biomart.filter; 

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.gitools.biomart.restful.model.Filter;
import org.gitools.biomart.restful.model.FilterDescription;
import org.gitools.biomart.restful.model.Option;

public class FilterSelecComponent extends FilterComponent  {

	// Biomart Configuration Wrappers
	private static class OptionListWrapper {

		private Option option;

		public OptionListWrapper(Option filterOption) {
			this.option = filterOption;
		}

		public Option getOption() {
			return option;
		}

		@Override
		public String toString() {

			String res = option.getDisplayName();
			if (res != null) {
				res = res.replace(":", "");
			}

			return res;
		}
	}
	
	//Members of class
	private String component;
	private final Integer COMBO_HEIGHT = 45;
	private final Integer LIST_HEIGHT = 190;


    /** Creates new form FilterSelecComponent1 */
    public FilterSelecComponent(FilterDescription d,FilterDescriptionPanel collectionParent) {

		super(d,collectionParent);
        initComponents();

		buildComponent();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listComponent = new javax.swing.JList();
        comboComponent = new javax.swing.JComboBox();

        jScrollPane1.setViewportView(listComponent);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(comboComponent, javax.swing.GroupLayout.Alignment.TRAILING, 0, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboComponent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listComponent;
    // End of variables declaration//GEN-END:variables

//FIXME : Test initialisation String list of options
	private void buildComponent() {

		List<OptionListWrapper> options = InitListOptions();
		if (filterDescription.getMultipleValues() == null || !filterDescription.getMultipleValues().equals("1")) {

			component = "ComboBox"; 

			comboComponent.setVisible(true);
			comboComponent.setAlignmentY(TOP_ALIGNMENT);

			jScrollPane1.setVisible(false);
			listComponent.setVisible(false);
			listComponent.setAlignmentY(BOTTOM_ALIGNMENT);		
			
			DefaultComboBoxModel m =  new DefaultComboBoxModel();
			for (OptionListWrapper o : options) m.addElement(o);
			comboComponent.setModel(m);
			currentHeight = COMBO_HEIGHT;

		} else {

			component = "List";
			listComponent.setVisible(true);
			listComponent.setAlignmentY(TOP_ALIGNMENT);

			DefaultListModel m =  new DefaultListModel();
			for (OptionListWrapper o : options) m.addElement(o);
			listComponent.setModel(m);

			comboComponent.setVisible(false);
			comboComponent.setAlignmentY(BOTTOM_ALIGNMENT);

			currentHeight =LIST_HEIGHT;
			
		}
		validate();


	}

	private List<OptionListWrapper> InitListOptions() {
		List<OptionListWrapper> res = new ArrayList<OptionListWrapper>();

		for (Option o : filterDescription.getOptions())
		{
			OptionListWrapper wrapper = new OptionListWrapper(o);
			res.add(wrapper);
		}
		return res;
	}

	@Override
	// FIXME : get Filter for selected value/s in list
	public Filter getFilter() {

		Filter f = new Filter();

		if (hasChild()) {

			f.setName(((OptionListWrapper) comboComponent.getSelectedItem()).getOption().getInternalName());
			f.setValue(getChildComponent().getFilter().getValue());
			f.setRadio(getChildComponent().getFilter().getRadio());
		} 
		else {

			f.setName(filterDescription.getInternalName());

			if (component.equals("ComboBox"))
			{
				if (comboComponent.getSelectedItem() != null)
					f.setValue(comboComponent.getSelectedItem().toString());
			}
			else {
				
				String selStr = "";
				if (listComponent.getSelectedValues() !=null && listComponent.getSelectedValues().length>0)
				{
					String res = null;

					for (int k = 0; k < listComponent.getSelectedValues().length; k++ )
					{
						res = ((OptionListWrapper) listComponent.getSelectedValues()[k]).toString();
						//String[] stringArray = Arrays.copyOf(listComponent.getSelectedValues(), listComponent.getSelectedValues().length, String[].class);
					
						//for	(String res : stringArray)
						selStr = selStr + "," + res;
					}
					
					f.setValue(selStr.substring(1));
					
				}
			}
		}
		return f;
	}

	@Override
	//Always render filter from select component filter
	public Boolean hasChanged() {
		return true;

	}


}
