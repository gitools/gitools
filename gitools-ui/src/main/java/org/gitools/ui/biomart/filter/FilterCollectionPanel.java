/*
 *  Copyright 2010 xavier.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */


package org.gitools.ui.biomart.filter;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import org.gitools.biomart.restful.model.FilterCollection;
import org.gitools.biomart.restful.model.FilterDescription;

import org.gitools.biomart.restful.model.Filter;
import org.gitools.ui.biomart.wizard.BiomartFilterConfigurationPage;

public class FilterCollectionPanel extends JPanel {

	private BiomartFilterConfigurationPage filterConfigurationPage;

	private Integer currentHeight = 0;
	private Integer DEFAULT_COLLECTION_PANEL_HEIGHT = 60;

	private Boolean rendered; //Controls if collectionPanel contains any component

	/** Creates new form FilterCollectionPanel1 */
	public FilterCollectionPanel(FilterCollection fc, BiomartFilterConfigurationPage parent) {

		initComponents();

		rendered =false;

		filterConfigurationPage = parent;

		buildDescriptions(fc);

	}

	private void buildDescriptions(FilterCollection fc) {
		
		collectionCheckBox.setText(fc.getDisplayName());

		descriptionsPanel.removeAll();

		descriptionsPanel.setLayout(new BoxLayout(descriptionsPanel, BoxLayout.Y_AXIS));

		FilterDescriptionPanel description = null;

		Boolean doLblDescription = renderLabelDescription (fc);

		for (FilterDescription d : fc.getFilterDescriptions()) {
			
			if (d.getHideDisplay() == null || !d.getHideDisplay().equals("true")) {

				description = new FilterDescriptionPanel(d, this, doLblDescription);

				rendered = description.getRenderPanel();
				descriptionsPanel.add(description);
				currentHeight += description.getCurrentHeight();
			}
		}


		validate();
	}

	/**
	 * Render Label descriptions when more than 1 descriptions per collection
	 * @param fc
	 * @return
	 */
	private Boolean renderLabelDescription (FilterCollection fc)
	{
		Integer components = 0;

		for (FilterDescription d : fc.getFilterDescriptions())
			if (d.getHideDisplay() == null || !d.getHideDisplay().equals("true"))
				components ++;

		return components > 1;
	}

	public Boolean isPanelRendered(){

		return rendered;

	}

	public FilterCollectionPanel() {

		initComponents();
	}

	public Integer getCurrentHeigh() {
		
		return currentHeight + DEFAULT_COLLECTION_PANEL_HEIGHT;
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionsPanel = new javax.swing.JPanel();
        collectionCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        descriptionsPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        javax.swing.GroupLayout descriptionsPanelLayout = new javax.swing.GroupLayout(descriptionsPanel);
        descriptionsPanel.setLayout(descriptionsPanelLayout);
        descriptionsPanelLayout.setHorizontalGroup(
            descriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
        descriptionsPanelLayout.setVerticalGroup(
            descriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        collectionCheckBox.setText("name");
        collectionCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stateChangedAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collectionCheckBox)
                    .addComponent(descriptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(collectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void stateChangedAction(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stateChangedAction
	}//GEN-LAST:event_stateChangedAction
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox collectionCheckBox;
    private javax.swing.JPanel descriptionsPanel;
    // End of variables declaration//GEN-END:variables


	public List<Filter> getFilters(){


		Filter f = null;
		List<Filter> filters = new ArrayList<Filter>();

		if (collectionCheckBox.isSelected())
		{
			// Obtain the filters involved for this event
			for (Component compo :  descriptionsPanel.getComponents()) {

				f = ((FilterDescriptionPanel) compo).getFilter();
				if ((f.getName() != null)&& (f.getValue() != null) && (!f.getValue().equals("")))
						filters.add(f);

				}
		}
		return filters;
	}
	
	public BiomartFilterConfigurationPage getFilterConfigurationPage() {
		return filterConfigurationPage;
	}
	
}
