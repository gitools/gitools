/*
 *  Copyright 2010 cperez.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/*
 * UnimplementedDialog.java
 *
 * Created on Mar 15, 2010, 5:50:20 PM
 */

package org.gitools.ui.dialog.clustering.color;

import cern.colt.matrix.ObjectMatrix1D;
import org.gitools.ui.dialog.*;
import java.awt.Window;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.text.BadLocationException;
import org.gitools.heatmap.model.Heatmap;
import org.gitools.heatmap.util.HeatmapUtil;
import org.gitools.matrix.model.AnnotationMatrix;
import org.gitools.ui.heatmap.panel.properties.HeatmapPropertiesHeaderPanel;

public class ColorClusterDialog extends javax.swing.JDialog {

	protected String pattern;
	protected Heatmap heatmap;
	protected boolean horizontal;

    /** Creates new form ColorClusterDialog */
    public ColorClusterDialog(java.awt.Window parent, Heatmap heatmap, boolean horizontal) {
        super(parent);
		setModal(true);
		initComponents();
		pattern = horizontal ? heatmap.getColumnHeader().getLabelPattern() :
					heatmap.getRowHeader().getLabelPattern();
		this.heatmap = heatmap;
		headerCompo.setTitle("Generate Color Clusters");
		headerCompo.setMessage("Choose between automatic and manual generation");
        
		updatePattern();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        labelPattern = new javax.swing.JTextField();
        attributePatternBtn = new javax.swing.JButton();
        headerCompo = new org.gitools.ui.platform.dialog.DialogHeaderPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ClusterList = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unimplemented feature");
        setBackground(java.awt.Color.white);
        setLocationByPlatform(true);

        okBtn.setText("Generate");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("<html>Generate automatic color cluster according to the Annotation pattern you choose </html>");

        jLabel11.setText("Pattern");

        attributePatternBtn.setText("...");
        attributePatternBtn.setToolTipText("Select attribute pattern");
        attributePatternBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributePatternBtnActionPerformed(evt);
            }
        });

        ClusterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ClusterList);

        jLabel12.setText("ClusterList");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerCompo, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(labelPattern, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(attributePatternBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(68, 68, 68)
                                    .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(87, 87, 87))
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(21, 21, 21)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerCompo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attributePatternBtn)
                    .addComponent(okBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
		HeatmapUtil.generateColorClusterSet(heatmap, horizontal);
	}//GEN-LAST:event_generateBtnActionPerformed


	private static class AnnAttr {
		private String name;

		public AnnAttr() { }

		public AnnAttr(String name) {
			this.name = name; }

		public String getName() {
			return name; }

		public String getPattern() {
			return "${" + name + "}"; }

		@Override public String toString() {
			return getName(); }
	}

	private void attributePatternBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributePatternBtnActionPerformed

		List<AnnAttr> attributes = new ArrayList<AnnAttr>();
		attributes.add(new AnnAttr() {
			@Override public String getName() {
				return "ID"; }

			@Override public String getPattern() {
				return "${id}"; }
		});

		Heatmap h = heatmap;
		AnnotationMatrix annMatrix = horizontal ?
			h.getColumnHeader().getAnnotations() :
			h.getRowHeader().getAnnotations();

		if (annMatrix != null) {
			ObjectMatrix1D columns = annMatrix.getColumns();

			for (int i = 0; i < columns.size(); i++)
				attributes.add(new AnnAttr(columns.getQuick(i).toString()));
		}

		AnnAttr[] attributesArray = new AnnAttr[attributes.size()];
		attributes.toArray(attributesArray);

		ListDialog<AnnAttr> dlg = new ListDialog<AnnAttr>(null, true, attributesArray);
		dlg.setTitle("Select annotation ...");
		dlg.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		dlg.setVisible(true);

		if (dlg.getReturnStatus() == ListDialog.RET_OK) {
			AnnAttr attr = dlg.getSelectedObject();
			try {
				//TODO remove selected text before
				labelPattern.getDocument().insertString(labelPattern.getCaretPosition(), attr.getPattern(), null);
			} catch (BadLocationException ex) {
				Logger.getLogger(HeatmapPropertiesHeaderPanel.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
}//GEN-LAST:event_attributePatternBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList ClusterList;
    private javax.swing.JButton attributePatternBtn;
    private org.gitools.ui.platform.dialog.DialogHeaderPanel headerCompo;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField labelPattern;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables

	private void updatePattern() {
		labelPattern.setText(pattern);
	}

}
